openapi: 3.0.3
info:
  title: Terrier - Hackathon Management System API
  description: API for managing hackathon events, teams, projects, judging, and sponsorships
  version: 0.0.1

servers:
  - url: https://api.hackathon-system.com/v1
    description: Production server
  - url: https://staging-api.hackathon-system.com/v1
    description: Staging server

tags:
  - name: Users
    description: User management operations
  - name: Hackathons
    description: Hackathon management operations
  - name: Attendees
    description: Attendee management operations
  - name: Hackers
    description: Hacker management operations
  - name: Teams
    description: Team management operations
  - name: Projects
    description: Project management operations
  - name: Resources
    description: Resource management operations
  - name: Applications
    description: Application management operations
  - name: Judges
    description: Judge management operations
  - name: Submissions
    description: Submission management operations
  - name: Evaluations
    description: Evaluation management operations
  - name: Tracks
    description: Track management operations
  - name: Sponsors
    description: Sponsor management operations
  - name: SponsorOrgs
    description: Sponsoring organization management operations
  - name: Events
    description: Event management operations
  - name: CheckIns
    description: Check-in management operations
  - name: JudgeAssignments
    description: Judge assignment management operations

paths:
  /users:
    get:
      summary: Get all users
      tags:
        - Users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

  /users/{userId}:
    get:
      summary: Get a user by ID
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    put:
      summary: Update a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    delete:
      summary: Delete a user
      tags:
        - Users
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: User deleted successfully

  /hackathons:
    get:
      summary: Get all hackathons
      tags:
        - Hackathons
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hackathon'
    post:
      summary: Create a new hackathon
      tags:
          - Hackathons
      requestBody:
          required: true
          content:
            application/json:
                schema:
                  $ref: '#/components/schemas/Hackathon'
      responses:
          '201':
            description: Hackathon created successfully
            content:
                application/json:
                  schema:
                      $ref: '#/components/schemas/Hackathon'
    put:
      summary: Update a hackathon
      tags:
        - Hackathons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hackathon'
      responses:
        '200':
          description: Hackathon updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hackathon'

  /hackathons/{hackathonId}/attendees:
    get:
      summary: Get all attendees for a hackathon
      tags:
        - Attendees
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Attendee'
    post:
      summary: Create a new attendee for a hackathon
      tags:
        - Attendees
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
      responses:
        '201':
          description: Attendee created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'

  /hackathons/{hackathonId}/attendees/{attendeeId}:
    get:
      summary: Get an attendee by ID
      tags:
        - Attendees
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: attendeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
    put:
      summary: Update an attendee
      tags:
        - Attendees
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: attendeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Attendee'
      responses:
        '200':
          description: Attendee updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Attendee'
    delete:
      summary: Delete an attendee
      tags:
        - Attendees
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: attendeeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Attendee deleted successfully

  /hackathons/{hackathonId}/teams:
    get:
      summary: Get all teams
      tags:
        - Teams
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
    post:
      summary: Create a new team
      tags:
        - Teams
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Team created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'

  /hackathons/{hackathonId}/teams/{teamId}:
    get:
      summary: Get a team by ID
      tags:
        - Teams
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      summary: Update a team
      tags:
        - Teams
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        '200':
          description: Team updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      summary: Delete a team
      tags:
        - Teams
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: teamId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Team deleted successfully

  /hackathons/{hackathonId}/projects:
    get:
      summary: Get all projects
      tags:
        - Projects
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Create a new project
      tags:
        - Projects
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'

  /hackathons/{hackathonId}/projects/{projectId}:
    get:
      summary: Get a project by ID
      tags:
        - Projects
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      summary: Update a project
      tags:
        - Projects
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    delete:
      summary: Delete a project
      tags:
        - Projects
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: projectId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Project deleted successfully

  /hackathons/{hackathonId}/hackers:
    get:
      summary: Get all hackers
      tags:
        - Hackers
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hacker'
    post:
      summary: Create a new hacker
      tags:
        - Hackers
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
      responses:
        '201':
          description: Hacker created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'

  /hackathons/{hackathonId}/hackers/{hackerId}:
    get:
      summary: Get a hacker by ID
      tags:
        - Hackers
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
    put:
      summary: Update a hacker
      tags:
        - Hackers
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hacker'
      responses:
        '200':
          description: Hacker updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hacker'
    delete:
      summary: Delete a hacker
      tags:
        - Hackers
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Hacker deleted successfully

  /hackathons/{hackathonId}/hackers/{hackerId}/application:
    get:
      summary: Get current application
      tags:
        - Applications
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'
    put:
        summary: Update current application
        tags:
            - Applications
        parameters:
          - name: hackathonId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: hackerId
            in: path
            required: true
            schema:
                type: string
                format: uuid
        requestBody:
            required: true
            content:
              application/json:
                  schema:
                    $ref: '#/components/schemas/Application'
        responses:
            '200':
              description: Application updated successfully
              content:
                  application/json:
                    schema:
                        $ref: '#/components/schemas/Application'

  /hackathons/{hackathonId}/hackers/{hackerId}/application/save:
    post:
      summary: Save current application
      tags:
        - Applications
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Application saved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /hackathons/{hackathonId}/hackers/{hackerId}/application/submit:
    post:
      summary: Submit current application
      tags:
        - Applications
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Application submitted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /hackathons/{hackathonId}/hackers/{hackerId}/application/accept:
    post:
      summary: Accept current application
      tags:
        - Applications
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Application accepted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /hackathons/{hackathonId}/hackers/{hackerId}/application/reject:
    post:
      summary: Reject current application
      tags:
        - Applications
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: hackerId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Application rejected successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Application'

  /hackathons/{hackathonId}/resources:
    get:
      summary: List resources
      description: Retrieve a list of resources sent, optionally filtered by sender, recipient, or other parameters.
      tags:
        - Resources
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
              type: string
              format: uuid
        - name: senderId
          in: query
          description: Filter by sender Id (organizer)
          schema:
            type: string
            format: uuid
        - name: recipientId
          in: query
          description: Filter by recipient Id (team or attendee)
          schema:
            type: string
            format: uuid
        - name: recipientType
          in: query
          description: Filter by recipient type (team or attendee)
          schema:
              type: string
              enum:
              - team
              - attendee
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'

  /hackathons/{hackathonId}/resources/{resourceId}:
    get:
        summary: Get a resource by ID
        tags:
            - Resources
        parameters:
          - name: hackathonId
            in: path
            required: true
            schema:
              type: string
              format: uuid
          - name: resourceId
            in: path
            required: true
            schema:
              type: string
              format: uuid
        responses:
            '200':
              description: Successful operation
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/Resource'
            '404':
              description: Resource not found

  /hackathons/{hackathonId}/judges:
    get:
      summary: Get all judges
      tags:
        - Judges
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Judge'
    post:
      summary: Create a new judge
      tags:
        - Judges
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Judge'
      responses:
        '201':
          description: Judge created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'

  /hackathons/{hackathonId}/judges/{judgeId}:
    get:
      summary: Get a judge by ID
      tags:
        - Judges
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
    put:
      summary: Update a judge
      tags:
        - Judges
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Judge'
      responses:
        '200':
          description: Judge updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Judge'
    delete:
      summary: Delete a judge
      tags:
        - Judges
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Judge deleted successfully

  /hackathons/{hackathonId}/submissions:
    get:
      summary: Get all submissions
      tags:
        - Submissions
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Submission'
    post:
      summary: Create a new submission
      tags:
        - Submissions
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '201':
          description: Submission created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'

  /hackathons/{hackathonId}/submissions/{submissionId}:
    get:
      summary: Get a submission by ID
      tags:
        - Submissions
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
    put:
      summary: Update a submission
      tags:
        - Submissions
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Submission'
      responses:
        '200':
          description: Submission updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Submission'
    delete:
      summary: Delete a submission
      tags:
        - Submissions
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: submissionId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Submission deleted successfully

  /hackathons/{hackathonId}/evaluations:
    get:
      summary: Get all evaluations
      tags:
        - Evaluations
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Evaluation'
    post:
      summary: Create a new evaluation
      tags:
        - Evaluations
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evaluation'
      responses:
        '201':
          description: Evaluation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'

  /hackathons/{hackathonId}/evaluations/{evaluationId}:
    get:
      summary: Get an evaluation by ID
      tags:
        - Evaluations
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
    put:
      summary: Update an evaluation
      tags:
        - Evaluations
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Evaluation'
      responses:
        '200':
          description: Evaluation updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Evaluation'
    delete:
      summary: Delete an evaluation
      tags:
        - Evaluations
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: evaluationId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Evaluation deleted successfully

  /hackathons/{hackathonId}/tracks:
    get:
      summary: Get all tracks
      tags:
        - Tracks
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Track'
    post:
      summary: Create a new track
      tags:
        - Tracks
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '201':
          description: Track created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'

  /hackathons/{hackathonId}/tracks/{trackId}:
    get:
      summary: Get a track by ID
      tags:
        - Tracks
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
    put:
      summary: Update a track
      tags:
        - Tracks
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Track'
      responses:
        '200':
          description: Track updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Track'
    delete:
      summary: Delete a track
      tags:
        - Tracks
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: trackId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Track deleted successfully

  /hackathons/{hackathonId}/sponsors:
    get:
      summary: Get all sponsors
      tags:
        - Sponsors
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Sponsor'
    post:
      summary: Create a new sponsor
      tags:
        - Sponsors
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '201':
          description: Sponsor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'

  /hackathons/{hackathonId}/sponsors/{sponsorId}:
    get:
      summary: Get a sponsor by ID
      tags:
        - Sponsors
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
    put:
      summary: Update a sponsor
      tags:
        - Sponsors
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sponsor'
      responses:
        '200':
          description: Sponsor updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Sponsor'
    delete:
      summary: Delete a sponsor
      tags:
        - Sponsors
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Sponsor deleted successfully

  /hackathons/{hackathonId}/sponsor-orgs:
    get:
      summary: Get all sponsor organizations
      tags:
        - SponsorOrgs
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SponsorOrg'
    post:
      summary: Create a new sponsor organization
      tags:
        - SponsorOrgs
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorOrg'
      responses:
        '201':
          description: Sponsor organization created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorOrg'

  /hackathons/{hackathonId}/sponsor-orgs/{sponsorOrgId}:
    get:
      summary: Get a sponsor organization by ID
      tags:
        - SponsorOrgs
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorOrgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorOrg'
    put:
      summary: Update a sponsor organization
      tags:
        - SponsorOrgs
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorOrgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SponsorOrg'
      responses:
        '200':
          description: Sponsor organization updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SponsorOrg'
    delete:
      summary: Delete a sponsor organization
      tags:
        - SponsorOrgs
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: sponsorOrgId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Sponsor organization deleted successfully

  /hackathons/{hackathonId}/events:
    get:
      summary: Get all events
      tags:
        - Events
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
    post:
      summary: Create a new event
      tags:
        - Events
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '201':
          description: Event created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'

  /hackathons/{hackathonId}/events/{eventId}:
    get:
      summary: Get an event by ID
      tags:
        - Events
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    put:
      summary: Update an event
      tags:
        - Events
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
      responses:
        '200':
          description: Event updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
    delete:
      summary: Delete an event
      tags:
        - Events
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: eventId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Event deleted successfully

  /hackathons/{hackathonId}/check-ins:
    get:
      summary: Get all check-ins
      tags:
        - CheckIns
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CheckIn'
    post:
      summary: Create a new check-in
      tags:
        - CheckIns
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckIn'
      responses:
        '201':
          description: Check-in created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIn'

  /hackathons/{hackathonId}/check-ins/{checkInId}:
    get:
      summary: Get a check-in by ID
      tags:
        - CheckIns
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: checkInId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIn'
    put:
      summary: Update a check-in
      tags:
        - CheckIns
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: checkInId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckIn'
      responses:
        '200':
          description: Check-in updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckIn'
    delete:
      summary: Delete a check-in
      tags:
        - CheckIns
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: checkInId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Check-in deleted successfully

  /hackathons/{hackathonId}/judge-assignments:
    get:
      summary: Get all judge assignments
      tags:
        - JudgeAssignments
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JudgeAssignment'
    post:
      summary: Create a new judge assignment
      tags:
        - JudgeAssignments
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeAssignment'
      responses:
        '201':
          description: Judge assignment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeAssignment'

  /hackathons/{hackathonId}/judge-assignments/{judgeAssignmentId}:
    get:
      summary: Get a judge assignment by ID
      tags:
        - JudgeAssignments
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeAssignmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeAssignment'
    put:
      summary: Update a judge assignment
      tags:
        - JudgeAssignments
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeAssignmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/JudgeAssignment'
      responses:
        '200':
          description: Judge assignment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JudgeAssignment'
    delete:
      summary: Delete a judge assignment
      tags:
        - JudgeAssignments
      parameters:
        - name: hackathonId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: judgeAssignmentId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Judge assignment deleted successfully

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the user
        idp:
          type: string
          description: Identity provider identifier
        email:
          type: string
          format: email
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - idp
        - email

    Hackathon:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the hackathon
        name:
          type: string
        website:
          type: string
        year:
          type: integer
          description: Year of the hackathon
        type:
          type: string
          description: Type of hackathon
          enum:
            - virtual
            - in-person
            - hybrid
        location:
          type: string
          format: address
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    ResourceCreateRequest:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        recipients:
          type: array
          description: List of recipients (attendees or teams)
          items:
            type: object
            properties:
              recipientId:
                type: string
                format: uuid
              recipientType:
                type: string
                enum: [team, attendee]
            required:
              - recipientId
              - recipientType
      required:
        - title
        - content
        - recipients

    Resource:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        sender:
          $ref: '#/components/schemas/User'
        content:
          type: string
        recipients:
          type: array
          items:
            type: object
            properties:
              recipientId:
                type: string
                format: uuid
              recipientType:
                type: string
                enum: [team, attendee]
        createdAt:
          type: string
          format: date-time

    Attendee:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the attendee
        user:
          $ref: '#/components/schemas/User'
        hackathon:
          $ref: '#/components/schemas/Hackathon'
        roles:
          type: array
          items:
            type: string
          description: Roles for this attendee
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - user
        - hackathon

    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the project
        name:
          type: string
        team:
          $ref: '#/components/schemas/Team'
        description:
          type: string
        url:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - team

    Team:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the team
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name

    Hacker:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the hacker
        attendee:
          $ref: '#/components/schemas/Attendee'
        team:
          $ref: '#/components/schemas/Team'
        hackathon:
          $ref: '#/components/schemas/Hackathon'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - user
        - team

    Application:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the application
        hacker:
          $ref: '#/components/schemas/Hacker'
        project:
          $ref: '#/components/schemas/Project'
        status:
          type: string
          description: Status of the application
          enum:
            - pending
            - submitted
            - accepted
            - rejected
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - hacker

    Judge:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the judge
        user:
          $ref: '#/components/schemas/User'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - user

    Submission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the submission
        project:
          $ref: '#/components/schemas/Project'
        track:
          $ref: '#/components/schemas/Track'
        submittedAt:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - project
        - submittedAt

    Evaluation:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the evaluation
        judge:
          $ref: '#/components/schemas/Judge'
        submission:
          $ref: '#/components/schemas/Submission'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - submissionId

    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the track
        name:
          type: string
          description: Name of the track
        sponsor:
          $ref: '#/components/schemas/Sponsor'
        description:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name

    Sponsor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the sponsor
        user:
          $ref: '#/components/schemas/User'
        sponsorOrg:
          $ref: '#/components/schemas/SponsorOrg'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - user
        - sponsorOrg

    SponsorOrg:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the sponsor organization
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name

    Event:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the event
        name:
          type: string
        description:
          type: string
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
        location:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - description
        - startDate
        - endDate
        - location

    CheckIn:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the check-in
        hacker:
          $ref: '#/components/schemas/Hacker'
        event:
          $ref: '#/components/schemas/Event'
        timestamp:
          type: string
          format: date-time
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - hacker
        - timestamp

    JudgeAssignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique identifier for the judge assignment
        judge:
          $ref: '#/components/schemas/Judge'
        track:
          $ref: '#/components/schemas/Track'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - judge
        - track

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: []